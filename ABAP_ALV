*&-------------------------------------------------------------------*
*  Descrição : Programa de exemplo para criação de relatório ALV
*&-------------------------------------------------------------------*
REPORT  zexemplo_wjunior_curso_04.

*--------------------------------------------------------------------*
* Tabelas transparentes
*--------------------------------------------------------------------*
TABLES:
  vbak.                                " Documentos de vendas

*--------------------------------------------------------------------*
* Tipos standard
*--------------------------------------------------------------------*
* O conjunto de tipos SLIS é utilizado por funções ALV. Defina-o sem-
* pre no início do código fonte.
*--------------------------------------------------------------------*
TYPE-POOLS:
  slis.                                " Tipos globais para ALV

*--------------------------------------------------------------------*
* Tipos do usuário
*--------------------------------------------------------------------*
TYPES:
* Type utilizado na seleção de dados
  BEGIN OF ty_vbak,
    vbeln       LIKE vbak-vbeln           , " Número documento
    erdat       LIKE vbak-erdat           , " Data de criação
    vbtyp       LIKE vbak-vbtyp           , " Ctg.doc vendas distrib.
    auart       LIKE vbak-auart           , " Tipo de documento
    netwr       LIKE vbak-netwr           , " Valor líquido
    kunnr       LIKE vbak-kunnr           , " Emissor da ordem
  END OF ty_vbak,
* Type para impressão do ALV
  BEGIN OF ty_alv,
    vbeln       LIKE vbak-vbeln           , " Número documento
    erdat       LIKE vbak-erdat           , " Data de criação
    vbtyp       LIKE vbak-vbtyp           , " Ctg. docto vendas
    auart       LIKE vbak-auart           , " Tipo de docto de vendas
    netwr       LIKE vbak-netwr           , " Valor líquido
    kunnr       LIKE vbak-kunnr           , " Emissor da ordem
    mark        TYPE c                    , " Marcar alterações
    color       TYPE slis_t_specialcol_alv, " Cores de cada linha/campo
  END OF ty_alv.

*--------------------------------------------------------------------*
* Tabelas internas ALV
* As estruturas aqui utilizadas (SLIS) estão explicadas com as opções
* mais importantes no final da apostila
*--------------------------------------------------------------------*
DATA:
  t_linecolor   TYPE TABLE OF slis_specialcol_alv, " Cores do ALV
  t_listheader  TYPE TABLE OF slis_listheader    , " Cabeçalho
  t_fieldcat    TYPE TABLE OF slis_fieldcat_alv  , " Catálogo de campos
  t_sort        TYPE TABLE OF slis_sortinfo_alv  . " Ordenação, quebras

*--------------------------------------------------------------------*
* Estruturas ALV
*--------------------------------------------------------------------*
DATA:
  wa_linecolor  TYPE slis_specialcol_alv, " Cores do ALV
  wa_listheader TYPE slis_listheader    , " Cabeçalho
  wa_fieldcat   TYPE slis_fieldcat_alv  , " Catálogo de campos
  wa_sort       TYPE slis_sortinfo_alv  , " Ordenação e quebras
  wa_layout     TYPE slis_layout_alv    , " layout para saída
  wa_print      TYPE slis_print_alv     , " Ctrl de impressão
  wa_variante   LIKE disvariant         . " Variante de exibição

*--------------------------------------------------------------------*
* Estruturas
*--------------------------------------------------------------------*
DATA:
  wa_vbak       TYPE ty_vbak,             " Campos p/ seleção de dados
  wa_alv        TYPE ty_alv .             " Campos p/ sída do ALV

*--------------------------------------------------------------------*
* Tabelas internas
*--------------------------------------------------------------------*
DATA:
  t_vbak        TYPE TABLE OF ty_vbak,    " Campos para seleção de dados
  t_alv         TYPE TABLE OF ty_alv .    " Campos para sída do ALV

*--------------------------------------------------------------------*
* Variáveis de uso geral
*--------------------------------------------------------------------*
DATA:
  v_tabix        LIKE sy-tabix,           " Posição do registro na tabela interna
  v_repid        LIKE sy-repid,           " Nome do programa
  v_flag         TYPE c       .           " Controle de exibição do cabeçalho

*--------------------------------------------------------------------*
* Tela de seleção
*--------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK one WITH FRAME TITLE text-001.
SELECT-OPTIONS: s_vbeln FOR  vbak-vbeln.     " Ordem de Vendas
SELECTION-SCREEN SKIP.
* O usuário terá a opção de iniciar a apresentação do relatório com
* algum layout salvo anteriormente. Essa escolha será armazenada em
* P_VARIA. Utilizaremos uma função que retorna todos os layout possíveis
PARAMETERS: p_varia LIKE disvariant-variant. " Variante de exibição
SELECTION-SCREEN END OF BLOCK one.

*--------------------------------------------------------------------*
* Evento initialization
*--------------------------------------------------------------------*
INITIALIZATION.
* Busca layout de exibição default para o relatório
  PERFORM zf_init_alv.

*--------------------------------------------------------------------*
* Evento At selection-screen
*--------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_varia.
* Abre um search help (matchcode) com os layouts já gravados.
  PERFORM zf_recupera_layouts_salvos.

*--------------------------------------------------------------------*
* Evento Start-of-selection
*--------------------------------------------------------------------*
START-OF-SELECTION.
* Seleciona a tabela transparente VBAK
  PERFORM zf_selecao_dados.

*--------------------------------------------------------------------*
* Evento End-of-selection
*--------------------------------------------------------------------*
END-OF-SELECTION.
* Se encontrou dados para os parâmetros de seleção
  IF NOT t_vbak[] IS INITIAL.
*   Processamento dos dados selecionados
    PERFORM zf_processa_dados.
*   Verifica se tem dados para montagem do ALV de saída
    IF NOT t_alv[] IS INITIAL.
      PERFORM:
        zf_altera_cores,        " Alterando as cores dos campos
        zf_monta_tabela_alv,    " Preenche o catálogo
        zf_sort_subtotal,       " Ordenação dos campos e subtotais
        zf_executa_funcao_alv.  " Gera o relatório
    ELSE.
      MESSAGE e208(00) WITH text-002. "Dados não encontrados.
    ENDIF.
  ENDIF.

*--------------------------------------------------------------------*
******************************  Form's  ******************************
*--------------------------------------------------------------------*
*--------------------------------------------------------------------*
*       Form  zf_init_alv
*--------------------------------------------------------------------*
* Busca layout de exibição default para o relatório. Se encontrar al-
* gum formato padrão para o relatório, essa função busca e já apresen-
* ta o relatório nesse formato. Um layout fica como default quando
* marcamos "Config.Prelim.". Um flag que pode ser marcado na opção
* "Gravar layout" na barra de ferramentas do ALV
*--------------------------------------------------------------------*
FORM zf_init_alv.

* Limpa estrutura que será usada na função
  CLEAR wa_variante.
* Captura o nome do programa em tempo de execução
  v_repid = sy-repid.
* Passa o nome do programa para a estrutura da função
  wa_variante-report = v_repid.
* Executa função que recupera os layouts salvos
  CALL FUNCTION 'REUSE_ALV_VARIANT_DEFAULT_GET'
    EXPORTING
      i_save     = 'A'
    CHANGING
      cs_variant = wa_variante
    EXCEPTIONS
      not_found  = 2.
* Se encontrou algum layout retorna valor para campo p_varia da tela
  IF sy-subrc = 0.
    p_varia = wa_variante-variant.
  ENDIF.

ENDFORM.                    "zf_init_alv

*--------------------------------------------------------------------*
*       Form  zf_recupera_layouts_salvos
*--------------------------------------------------------------------*
* Abre um search help com os layouts já gravados. Se o usuário escolhe
* algum aqui, o programa vai iniciar a apresentação do relatório com
* esse layout, não o que é default retornado na função
* REUSE_ALV_VARIANT_DEFAULT_GET em ZF_INIT_ALV (Acima)
*--------------------------------------------------------------------*
FORM zf_recupera_layouts_salvos.

* Limpa estrutura que será usada na função
  CLEAR wa_variante.
* Passa o nome do programa para a estrutura da função
  wa_variante-report = v_repid.
* Executa função que vai buscar os layouts salvos
  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = wa_variante
      i_save     = 'A'
    IMPORTING
      es_variant = wa_variante
    EXCEPTIONS
      not_found  = 2.
* Caso não encontre, exibe mensagem standard
  IF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
* Senão preenche campo da tela de seleção
  ELSE.
    p_varia = wa_variante-variant.
  ENDIF.

ENDFORM.                    "zf_recupera_layouts_salvos

*--------------------------------------------------------------------*
*       Form  zf_selecao_dados
*--------------------------------------------------------------------*
* Seleção dos dados
*--------------------------------------------------------------------*
FORM zf_selecao_dados.

* Limpa tabelas internas antes da seleção de dados
  REFRESH t_vbak.
* Seleciona dados na tabela VBAK de acordo com parâmetros de seleção
  SELECT vbeln erdat vbtyp auart netwr kunnr
    FROM vbak
    INTO TABLE t_vbak
   WHERE vbeln IN s_vbeln. "Parâmetro da tela
* Se não encontrou dados, emite mensagem de erro ao usuário
  IF sy-subrc NE 0.
    MESSAGE e208(00) WITH text-002. "Dados não encontrados.
  ENDIF.

ENDFORM.                    "zf_selecao_dados

*&-------------------------------------------------------------------*
*&      Form  ZF_PROCESSA_DADOS
*&-------------------------------------------------------------------*
*       Processamento dos dados selecionados
*--------------------------------------------------------------------*
FORM zf_processa_dados .

* Limpa tabelas internas
  REFRESH t_alv.
* Varrendo os registros encontrados
  LOOP AT t_vbak INTO wa_vbak.
*   Preenchendo estrutura do ALV
    MOVE-CORRESPONDING wa_vbak TO wa_alv.
*   Preenchendo tabela interna do ALV
    APPEND wa_alv TO t_alv.
    CLEAR wa_alv.
  ENDLOOP.

ENDFORM.                    " ZF_PROCESSA_DADOS

*--------------------------------------------------------------------*
*       Form  zf_altera_cores
*--------------------------------------------------------------------*
* Permite informar a cor que vc deseja para a coluna, inclusive pelo
* valor da variável
*--------------------------------------------------------------------*
FORM zf_altera_cores.

* Abaixo temos alguns exemploe de cores, mas estas dependem de como
* estão configuradas as cores do seu SAP-Gui
* Azul     = 1
* Verde    = 5
* Normal   = 2
* Vermelha = 6
* Neste loop varreremos a tabela de saída, aplicando regras para colo-
* rir os campos VBELN e NETWR
  LOOP AT t_alv INTO wa_alv.
*   Limpando as tabelas internas que armazenarão porpiriedades das cores
*   de cada campo, o q se dará a cada registro que será exibido no rela-
*   tório ALV
    REFRESH t_linecolor.
    REFRESH wa_alv-color.
*   Colorindo o campo VBELN
    wa_linecolor-fieldname = 'VBELN'.
    wa_linecolor-color-col = '6'.
    wa_linecolor-color-inv = '1'.      "Inverso, 1 liga e 0 desliga
    APPEND wa_linecolor TO t_linecolor.
*   Colorindo o campo NETWR, aplicando regra de acordo com seu valor na
*   tabela do ALV
*   Temos a opção INV, que é invertido, mesmo esquema do INT
*   1 liga e 0 desliga
    IF wa_alv-netwr > 10000.
      wa_linecolor-fieldname = 'NETWR'.
      wa_linecolor-color-col = '1'.
      wa_linecolor-color-int = '1'.  "Negrito (1-ligado, 0-Desligado)
    ELSE.
      wa_linecolor-fieldname = 'NETWR'.
      wa_linecolor-color-col = '6'.
      wa_linecolor-color-int = '1'.  "Negrigo (1-ligado, 0-Desligado)
    ENDIF.
    APPEND wa_linecolor TO t_linecolor.
*   Modificando a linha da tabela do ALV com as cores definidas acima
    wa_alv-color[] = t_linecolor[].
    MODIFY t_alv FROM wa_alv.
  ENDLOOP. " LOOP AT t_alv INTO wa_alv.

ENDFORM.                    "zf_altera_cores

*--------------------------------------------------------------------*
*       Form  zf_monta_tabela_alv
*--------------------------------------------------------------------*
* Monta tabela para apresentação do relatório ALV. Aqui montamos o ca-
* tálogo com as informações dos campos. Veja que não estamos preen-
* chendo todas as opções do catálogo, não é necessário.
*--------------------------------------------------------------------*
FORM zf_monta_tabela_alv.

  REFRESH t_fieldcat.
* Marcador de linhas selecionadas, esta é uma das opções possíveis com
* o campo MARK sendo transformado em um checkbox
*  CLEAR wa_fieldcat.
*  wa_fieldcat-fieldname        = 'MARK'.  " Campo da tabela interna
*  wa_fieldcat-tabname          = 'T_ALV'. " Nome da tabela interna
*  wa_fieldcat-reptext_ddic     = 'S'.     " Descrição do campo
*  wa_fieldcat-inttype          = 'C'.     " Tipo do campo
*  wa_fieldcat-outputlen        = 1.       " Tamanho do campo
*  wa_fieldcat-checkbox         = 'X'.     " Define como checkbox
*  wa_fieldcat-edit             = 'X'.     " Campo editável
*  APPEND wa_fieldcat TO t_fieldcat.

* Campo documento de vendas
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname        = 'VBELN'. " Campo da tabela interna
  wa_fieldcat-tabname          = 'T_ALV'. " Nome da tabela interna
  wa_fieldcat-ref_fieldname    = 'VBELN'. " Campo de referência
  wa_fieldcat-ref_tabname      = 'VBAK'.  " Tabela de referência
*  wa_fieldcat-reptext_ddic     = 'Doc. Vendas'. " Descrição do campo
*  wa_fieldcat-inttype          = 'C'.     " Tamanho do campo
*  wa_fieldcat-outputlen        = 10.      " Tamanho do campo
  wa_fieldcat-hotspot          = 'X'.     " Drill Down do campo
  APPEND wa_fieldcat TO t_fieldcat.

* Campo tipo de documento
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname        = 'AUART'. " Campo da tabela interna
  wa_fieldcat-tabname          = 'T_ALV'. " Nome da tabela interna
  wa_fieldcat-ref_fieldname    = 'AUART'. " Campo de referência
  wa_fieldcat-ref_tabname      = 'VBAK'.  " Tabela de referência
*  wa_fieldcat-reptext_ddic     = 'Tipo Documento'. "Descrição do campo
*  wa_fieldcat-inttype          = 'C'.     "Tamanho do campo
*  wa_fieldcat-outputlen        = 4.       "Tamanho do campo
  APPEND wa_fieldcat TO t_fieldcat.
* Campo emissor da ordem
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname        = 'KUNNR'. " Campo da tabela interna
  wa_fieldcat-tabname          = 'T_ALV'. " Nome da tabela interna
  wa_fieldcat-ref_fieldname    = 'KUNNR'. " Campo de referência
  wa_fieldcat-ref_tabname      = 'VBAK'.  " Tabela de referência
*  wa_fieldcat-reptext_ddic     = 'Emissor da Ordem'. " Descrição campo
*  wa_fieldcat-inttype          = 'C'.     " Tamanho do campo
*  wa_fieldcat-outputlen        = 10.      " Tamanho do campo
  APPEND wa_fieldcat TO t_fieldcat.

* Campo data de criação
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname        = 'ERDAT'. " Campo da tabela interna
  wa_fieldcat-tabname          = 'T_ALV'. " Nome da tabela interna
  wa_fieldcat-ref_fieldname    = 'ERDAT'. " Campo de referência
  wa_fieldcat-ref_tabname      = 'VBAK'.  " Tabela de referência
*  wa_fieldcat-reptext_ddic     = 'Data de Criação'. " Descrição campo
*  wa_fieldcat-inttype          = 'D'.     " Tamanho do campo
*  wa_fieldcat-outputlen        = 10.      " Tamanho do campo
  APPEND wa_fieldcat TO t_fieldcat.

* Campo valor líquido
* Para o campo NETWR, o relatório já vai mostrar linha de total
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname        = 'NETWR'. " Campo da tabela interna
  wa_fieldcat-tabname          = 'T_ALV'. " Nome da tabela interna
  wa_fieldcat-ref_fieldname    = 'NETWR'. " Campo de referência
  wa_fieldcat-ref_tabname      = 'VBAK'.  " Tabela de referência
*  wa_fieldcat-reptext_ddic     = 'Valor líquido'. " Descrição do campo
*  wa_fieldcat-inttype          = 'P'.     " Tamanho do campo
*  wa_fieldcat-outputlen        = 15.      " Tamanho do campo
  wa_fieldcat-do_sum           = 'X'.     " Terá somatória de valores
  APPEND wa_fieldcat TO t_fieldcat.

* Os campos abaixo não irão aparecer no relatório, apenas quando o
* usuário modificar o layout e inserir esses campos nas colunas a
* serem apresentadas
  CLEAR wa_fieldcat.
  wa_fieldcat-fieldname        = 'VBTYP'. " Campo da tabela interna
  wa_fieldcat-tabname          = 'T_ALV'. " Nome da tabela interna
  wa_fieldcat-ref_fieldname    = 'VBTYP'. " Campo de referência
  wa_fieldcat-ref_tabname      = 'VBAK'.  " Tabela de referência
*  wa_fieldcat-reptext_ddic     = 'Cat. Documento'. " Descrição campo
*  wa_fieldcat-inttype          = 'C'.     " Tamanho do campo
*  wa_fieldcat-outputlen        = 1.       " Tamanho do campo
  wa_fieldcat-no_out           = 'X'.     " Não será exibido inicialmente
  APPEND wa_fieldcat TO t_fieldcat.

* Não é necessário atribuir todos os campos ao catálogo do ALV, não
* ocorre nenhum erro por causa disso, o que não pode ser feito é atri-
* buir um campo com nome diferente do declarado na tabela interna de
* saida utilizada no ALV.

ENDFORM.                    "zf_monta_tabela_alv

*--------------------------------------------------------------------*
*       Form  zf_sort_subtotal
*--------------------------------------------------------------------*
* Classificação e item de subtotalização
*--------------------------------------------------------------------*
FORM zf_sort_subtotal.

  REFRESH t_sort.
* Ordenando pelo campo AUART
  CLEAR wa_sort.
  wa_sort-spos      = 1.       " Posícão na ordenação
  wa_sort-fieldname = 'AUART'. " Campo a ser ordenado
  wa_sort-tabname   = 'T_ALV'. " Tabela interna do ALV
  wa_sort-up        = 'X'.     " Ordenação crescente
  wa_sort-subtot    = 'X'.     " Exibir subtotais
  APPEND wa_sort TO t_sort.

* Ordenando pelo campo KUNNR
  CLEAR wa_sort.
  wa_sort-spos      = 2.       " Posícão na ordenação
  wa_sort-fieldname = 'KUNNR'. " Campo a ser ordenado
  wa_sort-tabname   = 'T_ALV'. " Tabela interna do ALV
  wa_sort-up        = 'X'.     " Ordenação crescente
  wa_sort-subtot    = 'X'.     " Exibir subtotais
  APPEND wa_sort TO t_sort.
* Com isso,  o relatório vai sair classificado em ordem crescente de
* cliente e ainda irá aparecer um subtotal pelos campos AUART e KUNNR

ENDFORM.                    "zf_sort_subtotal

*--------------------------------------------------------------------*
*       Form  zf_executa_funcao_alv
*--------------------------------------------------------------------*
* Apresenta relatório ALV
*--------------------------------------------------------------------*
FORM zf_executa_funcao_alv.

* Preenchendo algumas opções de impressão (Não é obrigatório)
  wa_layout-colwidth_optimize = 'X'. "Largura melhor possível coluna
  wa_layout-coltab_fieldname  = 'COLOR'."Colorir campos
  wa_layout-box_fieldname     = 'MARK'. "Marcador de linhas DEFAULT
* Indicando para função qual o layout que deve ser apresentado
* primeiro
  wa_variante-variant         = p_varia.
* Não imprime página de informações
  wa_print-no_print_listinfos = 'X'.
* Executa função que cria o ALV
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = v_repid  " Programa sendo executado
      i_background_id          = 'ALV_BACKGROUND' " Plano de fundo
      i_callback_top_of_page   = 'ZF_TOP_OF_PAGE' " Cabeçalho
      i_callback_pf_status_set = 'ZF_STATUS' " Barra de botões
      i_callback_user_command  = 'ZF_USER_COMMAND' " Ações dos botões
      it_fieldcat              = t_fieldcat[] " Catálogo de campos
      is_layout                = wa_layout " Propriedades de layout
      it_sort                  = t_sort[] " Quebras e ordenações
      is_variant               = wa_variante " Variante de tela
      is_print                 = wa_print " Controle de impressão
    TABLES
      t_outtab                 = t_alv " Registros a serem exibidos
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.

* As funções que geram relatórios ALV possuem vários parâmetros de
* I_CALLBACK. Os que mais são utilizados, são os que estão na cha-
* mada acima. Para ver os demais use a transação SE37. Esses parâ-
* metros são preenchidos com nomes de FORMS do programa.

* i_callback_program       = Qual programa que executou a função
* i_callback_top_of_page   = Rotina de cabeçalho
* i_callback_pf_status_set = Qual barra de tarefas a função vai usar
* i_callback_user_command  = Tratamento botões alterados ou criados

ENDFORM.                    "zf_executa_funcao_alv

*--------------------------------------------------------------------*
*       Form zf_user_command
*--------------------------------------------------------------------*
* Tratamento das opções do usuário. Por exemplo um Drill-down ou algum
* botão que vc inseriu ou alterou. O importante é conhecer os parâme-
* tros que o form recebe. A declaração como parâmetros USING do campo
* UCOMM e da estrutura SELFIELD são obrigatórias para o funcionamento
* correto do ALV, desde que precisemos validar alguma ação que um de-
* terminado botão irá executar.
*--------------------------------------------------------------------*
FORM zf_user_command USING ucomm    LIKE sy-ucomm
                           selfield TYPE slis_selfield.

* UCOMM:    é o sy-ucomm (Ok-code)
* SELFIELD: estrutura com dados que nós permite identifcar o que foi
* selecionado.
* Salvando a posição do relatório (Linha escolhida)
  selfield-row_stable = 'X'.
* Checando qual botão foi acionado. Somente os botões adicionados pelo
* programador precisam ser codificados, os demais utilizam as defini-
* ções standard.
  CASE ucomm. " Qual botão foi clicado
*   Caso queira exibir a Ordem de venda seleciona
    WHEN 'EXIBE_OV'.
*     Varre todos os registros marcados para exibição, ou seja, onde o
*     campo MARK estiver marcado
      LOOP AT t_alv INTO wa_alv WHERE mark = 'X'.
*       Preenche ID de memória com ordem selecionada
        SET PARAMETER ID 'AUN' FIELD wa_alv-vbeln.
*       Executa comando para abri transação VA03
        CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
      ENDLOOP.
  ENDCASE.
* Para um drill down a partir de um campo do layout do ALV
  IF NOT selfield-tabindex = 0.
    READ TABLE t_alv INTO wa_alv INDEX selfield-tabindex.
    IF sy-subrc EQ 0.
*     Preenche ID de memória com ordem selecionada
      SET PARAMETER ID 'AUN' FIELD wa_alv-vbeln.
*     Executa comando para abri transação VA03
      CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
    ENDIF.
  ENDIF.
* Atualiza a tela do ALV
  selfield-refresh = 'X'.

ENDFORM.                    "zf_user_command

*--------------------------------------------------------------------*
*       Form  zf_top_of_page
*--------------------------------------------------------------------*
* Cabeçalho do relatório
*--------------------------------------------------------------------*
FORM zf_top_of_page.

* Uma dica, em relatório ALV com utilização de drill down, na volta ao
* relatório principal ele vai executar novamente o cabeçalho. Isso faz
* com que ele fique duplicado. Utilize um flag que após apresentar o
* cabeçalho uma vez, fique marcado com um 'X', por exemplo.
* V_FLAG na primeira vez é branco.
  CHECK v_flag IS INITIAL.
* Monta as linhas de cabeçalho
  CLEAR t_listheader[].
  CLEAR wa_listheader.
  wa_listheader-typ  = 'H'. " Faz com que a fonte fique maior
  wa_listheader-info = 'Exemplo de relatório ALV'. " máximo 60 caracteres
  APPEND wa_listheader TO t_listheader.
* Definição do Projeto
  CLEAR wa_listheader.
  wa_listheader-typ  = 'A'. " Outro tipo de fonte
  wa_listheader-info = 'Segunda linha do cabeçalho'.  " máximo 60 caracteres
  APPEND wa_listheader TO t_listheader.
* Apresentando o cabeçalho.
* Temos abaixo a chamada de uma outra função, essa apresentará um logo
* definido pelo usuário. Já a função REUSE_ALV_GRID_DISPLAY (Principal)
* tem um parâmetro que você indica a imagem que será apresentada em ba-
* ckground, como na WEB.
  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      i_logo             = 'ENJOYSAP_LOGO' " Nome do logo, deve existir no SAP
      it_list_commentary = t_listheader.   " Texto do cabeçalho

* Para não apresentar mais o cabeçalho no refresh, preenche a variável
* de controle
  v_flag = 'X'.

ENDFORM.                    "zf_top_of_page

*--------------------------------------------------------------------*
*       Form zf_status
*--------------------------------------------------------------------*
* Status com botão de log (Item a mais na barra ALV)
* A declaração como parâmetro USING da tabela interna RT_EXTAB é obri-
* gatórias para o funcionamento correto do ALV, desde que uma barra de
* botões Z vá ser utilizada no programa. Esta estrutura controla quais
* botões devem ou não se exibidos no ALV
*--------------------------------------------------------------------*
FORM zf_status USING rt_extab TYPE slis_t_extab.

* Aqui estamos informando a função que ela deverá utilizar a barra de
* ferramentas ZSTATUS_04.
  SET PF-STATUS 'ZSTATUS_04'.

ENDFORM.                    "zf_status
